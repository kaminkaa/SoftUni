====================================================================================================

Abstraction 

-> Да използваме нещо, без да се интересуваме от конкретиката. 
-> Да знаем какво прави един метод, без да знаем как точно го прави.
-> Да не се интересуваме как конкретно е имплементирано дадено нещо, но да го използваме. 
		# sout -> System.out.println("Hello World!");
		# .nextInt();
-> Махаме конкретиката.
-> Когато отиваме да си вземем хляб от магазина не ни интересува мъж или жена ще е продавача, дебел
или слаб е, с каква коса е и тн. Интересува ни да му дадем парите и той да ни даде хляб, а не салам.
Не ни интересува дали ще има един продавач/ка или ще има един, на който плащаме, втори, който взима 
хляба и трети, който ни го дава. Интересува ни до толкова, до колкото може би ще стане по-бавно за 
нас.

====================================================================================================

Interface

-> Пример за абстракция.
-> Разликата с абстрактните класове е, че интерфейсът може да има множествено наследяване. Един клас 
може да наследи безброй много интерфейси, но най-много 1 клас.
-> Рамка на нещата, които задължително трябва да имаме в нашия клас. 

====================================================================================================

Inheritance 

-> Използва се, за да се избегне повтаряща се логика. 

====================================================================================================

Encapsulation

-> Всеки клас се грижи да показва навън само това, което той иска. 
-> Самите класове да си поддържат/контролират state-а, а не някой отвън да решава какво да се случва с тях. 
-> С енкапсулацията скриваме начина, по който си държим state-а. Докато с абстракцията скриваме 
конкретната имплементация на методите (скрива behaviour). 
-> getter-а не решава проблема с енкапсулацията.
	Пример: List от нещо в един клас, трябва да бъде защитен, защото се пренася по референция.
		Ако се върне просто с getter, пак може да бъде променян. Затова в getter-а връщаме
		или копие на списъка (new ArrayList<>(myList);), или използваме метода 
		unmodifiableCollection(myList);.
 
====================================================================================================

Polymorphism

-> Да използваме обектите, без да се интересуваме от конкретна имплементация. Когато имаме масив от 
drawable да не се интерсуваме дали някой drawable е circle, rectangle и т.н., а да ни интересува 
само че има .draw() метод.  
-> Да си пишем кода, без да се интересуваме от конкретната имплементация на обектите, които използваме.
-> Не ни интересуват другите неща, които могат да правят batman и bird. Интересува ни, че могат да 
летят. Flyable е интерфейс. 
	Пример: Flyable[] flyables = { batman, bird };
	   	for (Flyable flyable: flyables) {
		    flyable.fly();
	   	}

====================================================================================================

Override / Overload