====================================================================================================

Dice diceD6 = new Dice();

diceD6 не съдържа стойността за обекта от клас Dice. Тя съдържа един адрес, който се пази в Stack-а.
Информацията за обекта се пази в Heap-а. 
Когато се извика diceD6 това не дава обекта, а дава референцията, която сочи към определена клетка
в паметта. Тази референция(адрес) може да се подава насам натам. Когато този адрес се достъпва, 
всъщност се отива в Heap-а и се променят нещата там. 

Затова когато в един метод се подаде List като параметър и му се даде sort в метода, след това метода не
връща List, a си е void, въпреки че когато после се извика този метод в main-а и му се подаде листа,
след извикването на метода същия лист вече е сортиран: 

main{
	List<String> names = new ArrayList<>(){{
	add("pesh");
	add("joro");
	add("gosh");
	}}
	
	sortNames(names); // метода извиква обект, който се намира на еди кой си адрес 
	
	for (String name : names){ // тука достъпваме същия обект на определения адрес
		System.out.println(name);
	}
}

public static void sortNames (List<String> n){
	Collections.sort(n); // сортирай обекта, който се намира на определения адрес
}

====================================================================================================

Static Members

Неща, които не са закачени към конкретната инстантция, а към класа. 
Като closure в JavaScript.